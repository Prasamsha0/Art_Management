/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.agm.view;

import com.agm.model.GalleryModel;
import com.agm.util.ValidationUtil;
import java.awt.Color;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import com.agm.controller.algorithms.SelectionSort;
import com.agm.controller.algorithms.InsertionSort;
import com.agm.controller.algorithms.MergeSort;
import com.agm.controller.algorithms.BinarySearch;

/**
 * This is the GUI class where the main operation take place all the method in
 * sorting classes, validation classes, and model class is implemented here
 *
 * @Prasamsha Singh
 *
 */
public class GalleryMangement extends javax.swing.JFrame {

    private List<GalleryModel> artItemList; //List which stores the artwork detail
    private java.awt.CardLayout cardLayout;//A layput manager for switching between the screens
    private final ValidationUtil validationUtil;//
    private final Color redColor = new Color(255, 51, 0);
    private final Color greenColour = new Color(35, 101, 51);
    private final SelectionSort selectionSort; //declare selectionSort as a variable from the SelectionSort class
    private final InsertionSort insertionSort;//declare ielectionSort as a variable from the InserttionSort class
    private final MergeSort MergeSort;

    /**
     * constructer of the GalleryMangement frame initializes components setting
     * up necessary variables.
     */
    public GalleryMangement() {
        initComponents();//Initialize the components 
        validationUtil = new ValidationUtil();
        startApplication(); // Set up the CardLayout to switchbtween screens
        initializeData(); // Initialize artwork detail into the table
        startProgress();// Initialize the progress bar
        selectionSort = new SelectionSort();// Initialize the SelectionSort algorithm
        insertionSort = new InsertionSort();// Initialize the InsertionSort algorithm
        MergeSort = new MergeSort();// Initialize the MergeSort algorithm
    }

    //load initial values into the tables 
    private void initializeData() {
        artItemList = new LinkedList<>();
        // entering new artwork detailk
        addInitialArtwork(new GalleryModel(2234, "Zenep Mali", "23/02/2024", "Watercolor", "9841489349", 53000, "Narnia Studio", "Paper", "100 X 100"));
        addInitialArtwork(new GalleryModel(3455, "Aliza Singh", "24/09/2004", "Acrylic", "9860997123", 12903, "Mantra Studio", "Cloth", "1000 X 600"));
        addInitialArtwork(new GalleryModel(1095, "Rio Cantos", "12/05/2021", "Oil", "9860997123", 3456453, "Narsim Studio", "Glass", "1000 X 600"));
        addInitialArtwork(new GalleryModel(1008, "Lia Bhatta", "4/11/2013", "Acrylic", "9860997123", 100004, "Arctic Studio", "Cloth", "1000 X 600"));
        addInitialArtwork(new GalleryModel(2367, "Ria Lama", "30/03/2018", "Charcoal", "9860997123", 45673, "Himaliya Studio", "Glass", "1000 X 600"));
        addInitialArtwork(new GalleryModel(3984, "Binu Adhikari", "7/12/2020", "Acrylic", "9860997123", 325433, "Ktm Art Studio", "Cloth", "1000 X 600"));
    }

    /**
     * Adds artwork data to the table and the list.
     *
     * @param newArtItems the GalleryModel object containing artwork details to
     * be added.
     */
    private void addInitialArtwork(GalleryModel initialItems) {
        artItemList.add(initialItems);
        DefaultTableModel initialArtwork = (DefaultTableModel) mntable.getModel();
        initialArtwork.addRow(new Object[]{
            initialItems.getArtId(), initialItems.getName(), initialItems.getDate(), initialItems.getMedium(), initialItems.getContact(), initialItems.getPrice(), initialItems.getAddress(), initialItems.getFormatt(),
            initialItems.getSize()
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginPanel = new javax.swing.JPanel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        lgusernametxt = new javax.swing.JTextField();
        lgUsernamError = new javax.swing.JLabel();
        lgPasswordError = new javax.swing.JLabel();
        lgpasswordtxt = new javax.swing.JPasswordField();
        lgbutton = new javax.swing.JButton();
        lgImg = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        mnPanel = new javax.swing.JPanel();
        mnTabPane = new javax.swing.JTabbedPane();
        mnHome = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        mnHomePanelScroll = new javax.swing.JPanel();
        mnHmainImg = new javax.swing.JLabel();
        mnHTraditionalImg = new javax.swing.JLabel();
        mnHAbstractArtImg = new javax.swing.JLabel();
        mnHModernArtImg = new javax.swing.JLabel();
        mnHTraditionalLbl = new javax.swing.JLabel();
        mnHAbstractArtLbl = new javax.swing.JLabel();
        mnHModernArtLbl = new javax.swing.JLabel();
        mnLineimg1 = new javax.swing.JLabel();
        mnLineimg2 = new javax.swing.JLabel();
        mnLineimg3 = new javax.swing.JLabel();
        mnHDescriptionPanel = new javax.swing.JPanel();
        mnDescrition = new javax.swing.JLabel();
        mnHTitle2 = new javax.swing.JLabel();
        mnHTitle1 = new javax.swing.JLabel();
        mnLogoutBtn = new javax.swing.JButton();
        mnGallery = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        mnmainTableScroll = new javax.swing.JScrollPane();
        mntable = new javax.swing.JTable();
        mnSortButton = new javax.swing.JComboBox<>();
        mnSearchtxt = new javax.swing.JTextField();
        mnADComboBox = new javax.swing.JComboBox<>();
        mnSearchButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel22 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        mnAddArt = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        sizeError = new javax.swing.JLabel();
        mnSizetxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        mnFormattxt = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        mnMeduimtxt = new javax.swing.JComboBox<>();
        contactError = new javax.swing.JLabel();
        mnContacttxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        nameError = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        mnStudioAddresstxt = new javax.swing.JTextField();
        addressError = new javax.swing.JLabel();
        mnPricetxt = new javax.swing.JTextField();
        priceError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dateError = new javax.swing.JLabel();
        mnDatetxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        mnNametxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        mnIDtxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        idError = new javax.swing.JLabel();
        mnUpdateButton = new javax.swing.JButton();
        mnAddButton = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        mnDeleteButton = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        mnFeatured = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        mnAboutus = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        pnLoaddingscreen = new javax.swing.JPanel();
        scLoaddingscreen = new javax.swing.JProgressBar();
        imgLS = new javax.swing.JLabel();

        loginPanel.setBackground(new java.awt.Color(247, 247, 249));
        loginPanel.setMaximumSize(new java.awt.Dimension(1200, 700));
        loginPanel.setMinimumSize(new java.awt.Dimension(1200, 700));
        loginPanel.setPreferredSize(new java.awt.Dimension(1200, 700));
        loginPanel.setLayout(null);

        jLabel57.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel57.setText("password");
        loginPanel.add(jLabel57);
        jLabel57.setBounds(870, 410, 110, 16);

        jLabel58.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel58.setText("username");
        loginPanel.add(jLabel58);
        jLabel58.setBounds(870, 320, 80, 16);

        lgusernametxt.setBackground(java.awt.SystemColor.controlHighlight);
        lgusernametxt.setText("p");
        lgusernametxt.setBorder(null);
        lgusernametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgusernametxtActionPerformed(evt);
            }
        });
        loginPanel.add(lgusernametxt);
        lgusernametxt.setBounds(870, 320, 240, 50);
        loginPanel.add(lgUsernamError);
        lgUsernamError.setBounds(870, 380, 240, 20);
        loginPanel.add(lgPasswordError);
        lgPasswordError.setBounds(870, 470, 240, 20);

        lgpasswordtxt.setBackground(java.awt.SystemColor.controlHighlight);
        lgpasswordtxt.setText("z");
        lgpasswordtxt.setBorder(null);
        lgpasswordtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgpasswordtxtActionPerformed(evt);
            }
        });
        loginPanel.add(lgpasswordtxt);
        lgpasswordtxt.setBounds(870, 410, 240, 50);

        lgbutton.setBackground(new java.awt.Color(2, 17, 37));
        lgbutton.setForeground(new java.awt.Color(255, 255, 255));
        lgbutton.setText("login");
        lgbutton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        lgbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgbuttonActionPerformed(evt);
            }
        });
        loginPanel.add(lgbutton);
        lgbutton.setBounds(940, 500, 110, 40);

        lgImg.setBackground(new java.awt.Color(255, 255, 255));
        lgImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Untitled design 1.png"))); // NOI18N
        lgImg.setMaximumSize(new java.awt.Dimension(1000, 600));
        lgImg.setMinimumSize(new java.awt.Dimension(1000, 600));
        lgImg.setPreferredSize(new java.awt.Dimension(1000, 600));
        loginPanel.add(lgImg);
        lgImg.setBounds(0, -10, 800, 720);

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/person_13924070 1.png"))); // NOI18N
        loginPanel.add(jLabel26);
        jLabel26.setBounds(930, 140, 70, 56);

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Ellipse 1.png"))); // NOI18N
        loginPanel.add(jLabel25);
        jLabel25.setBounds(910, 120, 130, 110);

        jLabel27.setBackground(new java.awt.Color(255, 255, 255));
        jLabel27.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel27.setText("Welcome, Prasamsha");
        loginPanel.add(jLabel27);
        jLabel27.setBounds(870, 270, 250, 32);

        mnPanel.setBackground(new java.awt.Color(255, 255, 255));
        mnPanel.setMaximumSize(new java.awt.Dimension(1200, 700));
        mnPanel.setMinimumSize(new java.awt.Dimension(1200, 700));
        mnPanel.setPreferredSize(new java.awt.Dimension(1200, 700));
        mnPanel.setLayout(null);

        mnTabPane.setBackground(new java.awt.Color(255, 255, 255));
        mnTabPane.setDoubleBuffered(true);
        mnTabPane.setMaximumSize(new java.awt.Dimension(1000, 600));
        mnTabPane.setMinimumSize(new java.awt.Dimension(1000, 600));
        mnTabPane.setPreferredSize(new java.awt.Dimension(1000, 600));

        mnHome.setBackground(new java.awt.Color(247, 247, 249));
        mnHome.setMaximumSize(new java.awt.Dimension(1000, 500));
        mnHome.setMinimumSize(new java.awt.Dimension(1000, 500));
        mnHome.setPreferredSize(new java.awt.Dimension(1000, 500));
        mnHome.setLayout(null);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setMaximumSize(new java.awt.Dimension(1200, 1300));
        jScrollPane3.setMinimumSize(new java.awt.Dimension(1200, 700));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(1200, 700));

        mnHomePanelScroll.setBackground(new java.awt.Color(255, 255, 255));
        mnHomePanelScroll.setFocusTraversalPolicyProvider(true);
        mnHomePanelScroll.setMinimumSize(new java.awt.Dimension(1200, 700));
        mnHomePanelScroll.setPreferredSize(new java.awt.Dimension(1200, 900));
        mnHomePanelScroll.setLayout(null);

        mnHmainImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/home screen.png"))); // NOI18N
        mnHomePanelScroll.add(mnHmainImg);
        mnHmainImg.setBounds(2, -10, 550, 470);

        mnHTraditionalImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/DSC_6186 1.png"))); // NOI18N
        mnHomePanelScroll.add(mnHTraditionalImg);
        mnHTraditionalImg.setBounds(60, 570, 304, 219);

        mnHAbstractArtImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Pagoda 1.png"))); // NOI18N
        mnHomePanelScroll.add(mnHAbstractArtImg);
        mnHAbstractArtImg.setBounds(430, 560, 307, 230);

        mnHModernArtImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Willian Santiago 1.png"))); // NOI18N
        mnHomePanelScroll.add(mnHModernArtImg);
        mnHModernArtImg.setBounds(810, 570, 306, 219);

        mnHTraditionalLbl.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        mnHTraditionalLbl.setText("Traditional Art");
        mnHomePanelScroll.add(mnHTraditionalLbl);
        mnHTraditionalLbl.setBounds(60, 500, 100, 20);

        mnHAbstractArtLbl.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        mnHAbstractArtLbl.setText("Abstract Art");
        mnHomePanelScroll.add(mnHAbstractArtLbl);
        mnHAbstractArtLbl.setBounds(430, 490, 82, 20);

        mnHModernArtLbl.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        mnHModernArtLbl.setText("Modern Art");
        mnHomePanelScroll.add(mnHModernArtLbl);
        mnHModernArtLbl.setBounds(810, 490, 79, 20);

        mnLineimg1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Line 1.png"))); // NOI18N
        mnHomePanelScroll.add(mnLineimg1);
        mnLineimg1.setBounds(60, 530, 304, 27);

        mnLineimg2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Line 1.png"))); // NOI18N
        mnHomePanelScroll.add(mnLineimg2);
        mnLineimg2.setBounds(430, 530, 299, 27);

        mnLineimg3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Line 1.png"))); // NOI18N
        mnHomePanelScroll.add(mnLineimg3);
        mnLineimg3.setBounds(810, 530, 306, 27);

        mnHDescriptionPanel.setBackground(new java.awt.Color(247, 245, 243));
        mnHDescriptionPanel.setLayout(null);

        mnDescrition.setFont(new java.awt.Font("Sitka Display", 0, 24)); // NOI18N
        mnDescrition.setText("<html><p>This admin Panel is designed to help or manage </p><p>       the art works effectively and efficiently.  With  </p> <p> functions like add update and delete, you can  </p><p> easily manage the paintings with ease.</p></html>");
        mnHDescriptionPanel.add(mnDescrition);
        mnDescrition.setBounds(54, 160, 570, 236);

        mnHTitle2.setFont(new java.awt.Font("Sitka Banner", 0, 54)); // NOI18N
        mnHTitle2.setText("Mandala Art Point");
        mnHDescriptionPanel.add(mnHTitle2);
        mnHTitle2.setBounds(60, 110, 460, 61);

        mnHTitle1.setFont(new java.awt.Font("Sitka Banner", 0, 54)); // NOI18N
        mnHTitle1.setText("Welcome to");
        mnHDescriptionPanel.add(mnHTitle1);
        mnHTitle1.setBounds(80, 40, 350, 61);

        mnHomePanelScroll.add(mnHDescriptionPanel);
        mnHDescriptionPanel.setBounds(530, 0, 670, 450);

        mnLogoutBtn.setText("Back to Login");
        mnLogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnLogoutBtnActionPerformed(evt);
            }
        });
        mnHomePanelScroll.add(mnLogoutBtn);
        mnLogoutBtn.setBounds(980, 800, 140, 23);

        jScrollPane3.setViewportView(mnHomePanelScroll);

        mnHome.add(jScrollPane3);
        jScrollPane3.setBounds(0, 0, 1200, 700);

        mnTabPane.addTab("home", mnHome);

        mnGallery.setBackground(new java.awt.Color(247, 247, 249));
        mnGallery.setForeground(new java.awt.Color(255, 255, 255));
        mnGallery.setEnabled(false);
        mnGallery.setFocusable(false);
        mnGallery.setMaximumSize(new java.awt.Dimension(1200, 700));
        mnGallery.setMinimumSize(new java.awt.Dimension(1200, 700));
        mnGallery.setPreferredSize(new java.awt.Dimension(1200, 700));
        mnGallery.setLayout(null);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(1200, 700));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(1200, 700));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setMaximumSize(new java.awt.Dimension(1200, 1600));
        jPanel5.setMinimumSize(new java.awt.Dimension(1200, 1600));
        jPanel5.setPreferredSize(new java.awt.Dimension(1200, 1600));
        jPanel5.setLayout(null);

        mntable.setBackground(new java.awt.Color(81, 82, 103));
        mntable.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        mntable.setForeground(new java.awt.Color(255, 255, 255));
        mntable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ArtID", "Artist Name", "Date", "Meduim", "Contact", "Price", "Studio Address", "Format ", "Size"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mnmainTableScroll.setViewportView(mntable);

        jPanel5.add(mnmainTableScroll);
        mnmainTableScroll.setBounds(10, 110, 1160, 140);

        mnSortButton.setBackground(new java.awt.Color(165, 135, 99));
        mnSortButton.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "ID", "Price" }));
        mnSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSortButtonActionPerformed(evt);
            }
        });
        jPanel5.add(mnSortButton);
        mnSortButton.setBounds(1070, 60, 110, 30);

        mnSearchtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSearchtxtActionPerformed(evt);
            }
        });
        jPanel5.add(mnSearchtxt);
        mnSearchtxt.setBounds(590, 60, 160, 30);

        mnADComboBox.setBackground(new java.awt.Color(255, 153, 51));
        mnADComboBox.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        mnADComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "lowest to higest", "highest to lowest" }));
        mnADComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnADComboBoxActionPerformed(evt);
            }
        });
        jPanel5.add(mnADComboBox);
        mnADComboBox.setBounds(850, 60, 127, 30);

        mnSearchButton.setBackground(new java.awt.Color(165, 135, 99));
        mnSearchButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        mnSearchButton.setText("search");
        mnSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSearchButtonActionPerformed(evt);
            }
        });
        jPanel5.add(mnSearchButton);
        mnSearchButton.setBounds(470, 60, 110, 30);

        jPanel6.setBackground(new java.awt.Color(233, 224, 209));
        jPanel6.setMinimumSize(new java.awt.Dimension(374, 552));
        jPanel6.setPreferredSize(new java.awt.Dimension(374, 552));
        jPanel6.setLayout(null);

        jLabel44.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Pagoda 2.png"))); // NOI18N
        jPanel6.add(jLabel44);
        jLabel44.setBounds(30, 10, 280, 390);

        jLabel45.setFont(new java.awt.Font("Sitka Banner", 0, 36)); // NOI18N
        jLabel45.setText("Patan Valley");
        jPanel6.add(jLabel45);
        jLabel45.setBounds(110, 410, 167, 46);

        jLabel36.setFont(new java.awt.Font("Sitka Banner", 0, 24)); // NOI18N
        jLabel36.setText("190000$");
        jPanel6.add(jLabel36);
        jLabel36.setBounds(150, 460, 79, 45);

        jPanel5.add(jPanel6);
        jPanel6.setBounds(20, 390, 360, 570);

        jPanel8.setBackground(new java.awt.Color(233, 224, 209));
        jPanel8.setMaximumSize(new java.awt.Dimension(374, 552));
        jPanel8.setMinimumSize(new java.awt.Dimension(374, 552));
        jPanel8.setPreferredSize(new java.awt.Dimension(374, 552));

        jLabel40.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/AmaDablam_EBCTREKNEPAL 1.png"))); // NOI18N

        jLabel51.setFont(new java.awt.Font("Sitka Banner", 0, 36)); // NOI18N
        jLabel51.setText("EBC painting");

        jLabel50.setFont(new java.awt.Font("Sitka Banner", 0, 24)); // NOI18N
        jLabel50.setText("300000$");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel51)
                .addGap(89, 89, 89))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel40))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jLabel50)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel40)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel51)
                .addGap(18, 18, 18)
                .addComponent(jLabel50)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel8);
        jPanel8.setBounds(810, 390, 360, 570);

        jPanel9.setBackground(new java.awt.Color(233, 224, 209));
        jPanel9.setMaximumSize(new java.awt.Dimension(374, 552));
        jPanel9.setMinimumSize(new java.awt.Dimension(374, 552));
        jPanel9.setPreferredSize(new java.awt.Dimension(374, 552));
        jPanel9.setLayout(null);

        jLabel41.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Mandalas_ART_NEPAL 1.png"))); // NOI18N
        jPanel9.add(jLabel41);
        jLabel41.setBounds(40, 20, 330, 380);

        jLabel42.setFont(new java.awt.Font("Sitka Banner", 0, 24)); // NOI18N
        jLabel42.setText("1000000$");
        jPanel9.add(jLabel42);
        jLabel42.setBounds(180, 480, 110, 31);

        jLabel43.setFont(new java.awt.Font("Sitka Banner", 0, 36)); // NOI18N
        jLabel43.setText("Thanka Mandala");
        jPanel9.add(jLabel43);
        jLabel43.setBounds(110, 430, 260, 46);

        jPanel5.add(jPanel9);
        jPanel9.setBounds(389, 393, 410, 570);

        jPanel10.setBackground(new java.awt.Color(233, 224, 209));
        jPanel10.setMaximumSize(new java.awt.Dimension(374, 552));
        jPanel10.setMinimumSize(new java.awt.Dimension(374, 552));
        jPanel10.setPreferredSize(new java.awt.Dimension(374, 552));

        jLabel39.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/ShreeYantaThangka 1.png"))); // NOI18N

        jLabel49.setFont(new java.awt.Font("Sitka Banner", 0, 36)); // NOI18N
        jLabel49.setText("Mandala");

        jLabel48.setFont(new java.awt.Font("Sitka Banner", 0, 24)); // NOI18N
        jLabel48.setText("23400$");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel39))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(jLabel48))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jLabel49)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel49)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel48)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel10);
        jPanel10.setBounds(20, 970, 360, 560);

        jPanel11.setBackground(new java.awt.Color(233, 224, 209));
        jPanel11.setMaximumSize(new java.awt.Dimension(374, 552));
        jPanel11.setMinimumSize(new java.awt.Dimension(374, 552));
        jPanel11.setPreferredSize(new java.awt.Dimension(374, 552));

        jLabel38.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/MountainAmaDablam 1.png"))); // NOI18N

        jLabel46.setFont(new java.awt.Font("Sitka Banner", 0, 36)); // NOI18N
        jLabel46.setText("Lone Yak");

        jLabel47.setFont(new java.awt.Font("Sitka Banner", 0, 24)); // NOI18N
        jLabel47.setText("18000$");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel38)
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel46)
                        .addGap(139, 139, 139))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel47)
                        .addGap(166, 166, 166))))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel47)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel11);
        jPanel11.setBounds(389, 968, 410, 560);

        jPanel12.setBackground(new java.awt.Color(233, 224, 209));
        jPanel12.setMaximumSize(new java.awt.Dimension(374, 552));
        jPanel12.setMinimumSize(new java.awt.Dimension(374, 552));
        jPanel12.setPreferredSize(new java.awt.Dimension(374, 552));

        jLabel37.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Modern_Leather_chair_with_Vertical_Mockup_on_Low_credenza_98237640-c37e-45e7-81a8-96cb2344c651 1.png"))); // NOI18N

        jLabel52.setFont(new java.awt.Font("Sitka Banner", 0, 36)); // NOI18N
        jLabel52.setText("Abstract Painting");

        jLabel53.setFont(new java.awt.Font("Sitka Banner", 0, 24)); // NOI18N
        jLabel53.setText("10000$");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel37)
                            .addComponent(jLabel52)))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(jLabel53)))
                .addGap(0, 49, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel37)
                .addGap(18, 18, 18)
                .addComponent(jLabel52)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel53)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel12);
        jPanel12.setBounds(810, 970, 360, 560);

        jSeparator1.setBackground(new java.awt.Color(102, 51, 0));
        jPanel5.add(jSeparator1);
        jSeparator1.setBounds(0, 295, 1253, 10);

        jLabel22.setFont(new java.awt.Font("Sitka Banner", 0, 24)); // NOI18N
        jLabel22.setText("Collections");
        jPanel5.add(jLabel22);
        jLabel22.setBounds(10, 270, 120, 31);

        jLabel54.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel54.setText("sort by");
        jPanel5.add(jLabel54);
        jLabel54.setBounds(1030, 70, 43, 16);

        jLabel55.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel55.setText("order");
        jPanel5.add(jLabel55);
        jLabel55.setBounds(810, 70, 29, 16);

        jLabel56.setFont(new java.awt.Font("Sitka Banner", 0, 64)); // NOI18N
        jLabel56.setText("Add Art");
        jPanel5.add(jLabel56);
        jLabel56.setBounds(20, 20, 390, 70);

        jScrollPane1.setViewportView(jPanel5);

        mnGallery.add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 1200, 700);

        mnTabPane.addTab("items list", mnGallery);

        mnAddArt.setBackground(new java.awt.Color(193, 227, 254));
        mnAddArt.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(159, 210, 250));
        jPanel2.setMinimumSize(new java.awt.Dimension(702, 452));
        jPanel2.setPreferredSize(new java.awt.Dimension(702, 452));
        jPanel2.setLayout(null);
        jPanel2.add(sizeError);
        sizeError.setBounds(25, 397, 211, 21);

        mnSizetxt.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        mnSizetxt.setText("12 X 123");
        mnSizetxt.setBorder(null);
        mnSizetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSizetxtActionPerformed(evt);
            }
        });
        jPanel2.add(mnSizetxt);
        mnSizetxt.setBounds(30, 340, 211, 40);

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel8.setText("Size");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(30, 300, 130, 20);

        mnFormattxt.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        mnFormattxt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Paper", "Cloth", "Glass" }));
        mnFormattxt.setBorder(null);
        mnFormattxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnFormattxtActionPerformed(evt);
            }
        });
        jPanel2.add(mnFormattxt);
        mnFormattxt.setBounds(280, 340, 159, 40);

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel5.setText("Format");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(280, 300, 90, 20);

        jLabel9.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel9.setText("Meduim");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(470, 300, 100, 20);

        mnMeduimtxt.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        mnMeduimtxt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Acrylic", "Watercolor", "Oil", "Charcoal" }));
        mnMeduimtxt.setToolTipText("");
        mnMeduimtxt.setBorder(null);
        mnMeduimtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnMeduimtxtActionPerformed(evt);
            }
        });
        jPanel2.add(mnMeduimtxt);
        mnMeduimtxt.setBounds(470, 340, 167, 40);
        jPanel2.add(contactError);
        contactError.setBounds(482, 244, 220, 40);

        mnContacttxt.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        mnContacttxt.setText("9812345678");
        mnContacttxt.setBorder(null);
        mnContacttxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnContacttxtActionPerformed(evt);
            }
        });
        jPanel2.add(mnContacttxt);
        mnContacttxt.setBounds(500, 201, 182, 37);

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel4.setText("Contact");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(500, 163, 90, 20);

        nameError.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jPanel2.add(nameError);
        nameError.setBounds(271, 97, 211, 20);

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel7.setText("Address");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(271, 163, 130, 20);

        mnStudioAddresstxt.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        mnStudioAddresstxt.setText("bale");
        mnStudioAddresstxt.setBorder(null);
        mnStudioAddresstxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnStudioAddresstxtActionPerformed(evt);
            }
        });
        jPanel2.add(mnStudioAddresstxt);
        mnStudioAddresstxt.setBounds(271, 201, 211, 37);
        jPanel2.add(addressError);
        addressError.setBounds(271, 244, 211, 20);

        mnPricetxt.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        mnPricetxt.setText("13445");
        mnPricetxt.setBorder(null);
        mnPricetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnPricetxtActionPerformed(evt);
            }
        });
        jPanel2.add(mnPricetxt);
        mnPricetxt.setBounds(25, 201, 211, 37);
        jPanel2.add(priceError);
        priceError.setBounds(25, 244, 211, 20);

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel3.setText("Price");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(25, 163, 120, 20);

        dateError.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jPanel2.add(dateError);
        dateError.setBounds(500, 97, 168, 20);

        mnDatetxt.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        mnDatetxt.setText("dd/mm/yyyy");
        mnDatetxt.setBorder(null);
        mnDatetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnDatetxtActionPerformed(evt);
            }
        });
        jPanel2.add(mnDatetxt);
        mnDatetxt.setBounds(500, 52, 182, 39);

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel6.setText("Date");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(500, 26, 100, 20);

        mnNametxt.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        mnNametxt.setText("afgg");
        mnNametxt.setBorder(null);
        mnNametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnNametxtActionPerformed(evt);
            }
        });
        jPanel2.add(mnNametxt);
        mnNametxt.setBounds(271, 52, 211, 39);

        jLabel10.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel10.setText("Name");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(271, 26, 110, 20);

        mnIDtxt.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        mnIDtxt.setText("1111");
        mnIDtxt.setBorder(null);
        mnIDtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnIDtxtActionPerformed(evt);
            }
        });
        jPanel2.add(mnIDtxt);
        mnIDtxt.setBounds(25, 52, 211, 39);

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel1.setText("art ID");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(25, 26, 100, 20);

        idError.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jPanel2.add(idError);
        idError.setBounds(25, 97, 211, 20);

        mnAddArt.add(jPanel2);
        jPanel2.setBounds(480, 70, 702, 452);

        mnUpdateButton.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        mnUpdateButton.setText("Update");
        mnUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnUpdateButtonActionPerformed(evt);
            }
        });
        mnAddArt.add(mnUpdateButton);
        mnUpdateButton.setBounds(800, 540, 110, 30);

        mnAddButton.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        mnAddButton.setText("Add");
        mnAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnAddButtonActionPerformed(evt);
            }
        });
        mnAddArt.add(mnAddButton);
        mnAddButton.setBounds(680, 540, 100, 30);

        clear.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        clear.setText("clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        mnAddArt.add(clear);
        clear.setBounds(1050, 540, 110, 30);

        mnDeleteButton.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        mnDeleteButton.setText("delete");
        mnDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnDeleteButtonActionPerformed(evt);
            }
        });
        mnAddArt.add(mnDeleteButton);
        mnDeleteButton.setBounds(920, 540, 120, 30);

        jLabel19.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        jLabel19.setText("Add Artwork");
        mnAddArt.add(jLabel19);
        jLabel19.setBounds(710, 10, 370, 62);

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Designer_working_with_pen_display_Illustration-removebg-preview 1.png"))); // NOI18N
        jLabel18.setText("jLabel18");
        mnAddArt.add(jLabel18);
        jLabel18.setBounds(3, 0, 460, 670);

        mnTabPane.addTab("add art ", mnAddArt);

        mnFeatured.setBackground(new java.awt.Color(255, 255, 255));
        mnFeatured.setMaximumSize(new java.awt.Dimension(1000, 600));
        mnFeatured.setMinimumSize(new java.awt.Dimension(1000, 600));
        mnFeatured.setPreferredSize(new java.awt.Dimension(1000, 600));
        mnFeatured.setLayout(null);

        jLabel2.setBackground(new java.awt.Color(15, 255, 255));
        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        jLabel2.setText("<html><p>Featured </p><p>Artworks</p> <html>");
        mnFeatured.add(jLabel2);
        jLabel2.setBounds(50, 30, 260, 140);

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/img 5.jpg"))); // NOI18N
        jLabel17.setText("jLabel17");
        mnFeatured.add(jLabel17);
        jLabel17.setBounds(180, 240, 500, 310);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/img 1.jpg"))); // NOI18N
        jLabel11.setText("jLabel11");
        mnFeatured.add(jLabel11);
        jLabel11.setBounds(580, 380, 610, 350);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/img 2.jpg"))); // NOI18N
        mnFeatured.add(jLabel14);
        jLabel14.setBounds(620, -10, 560, 300);

        mnTabPane.addTab("featured", mnFeatured);

        mnAboutus.setBackground(new java.awt.Color(255, 255, 255));
        mnAboutus.setFocusTraversalPolicyProvider(true);
        mnAboutus.setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jLabel24.setBackground(new java.awt.Color(0, 0, 0));
        jLabel24.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("<html><p>Established in the 1950s, Mandala Art Gallery is one of the </p><p>oldest and most renowned art galleries in Nepal. Located in </p><p>the heart of Kathmandu, the gallery has been a hub for art </p><p>enthusiasts, offering a unique blend of traditional and </p><p>contemporary artworks. With a special focus on the intricate </p><p>and mesmerizing Mandala art, the gallery has become a </p><p>symbol of Nepal's rich artistic heritage. Through the years, </p><p>Mandala Art Gallery has continued to showcase exceptional </p><p>works that celebrate the cultural and spiritual essence of </p><p>Nepal, making it a must-visit destination for art lovers from </p><p>around the world.</p><html>");

        jLabel23.setBackground(new java.awt.Color(0, 0, 0));
        jLabel23.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("About US");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        mnAboutus.add(jPanel1);
        jPanel1.setBounds(440, 210, 730, 430);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Resurrecting an Ancient Fabric More Precious Than Silk That Hasn't Been Spun for Centuries 1 (1).png"))); // NOI18N
        mnAboutus.add(jLabel12);
        jLabel12.setBounds(40, 70, 690, 440);

        mnTabPane.addTab("about us", mnAboutus);

        mnPanel.add(mnTabPane);
        mnTabPane.setBounds(0, 0, 1200, 700);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 700));
        setResizable(false);
        setSize(new java.awt.Dimension(1200, 700));
        getContentPane().setLayout(null);

        pnLoaddingscreen.setBackground(new java.awt.Color(247, 247, 249));
        pnLoaddingscreen.setLayout(null);

        scLoaddingscreen.setBackground(new java.awt.Color(255, 204, 102));
        pnLoaddingscreen.add(scLoaddingscreen);
        scLoaddingscreen.setBounds(500, 530, 280, 24);

        imgLS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Frame 1 (11).png"))); // NOI18N
        imgLS.setMaximumSize(new java.awt.Dimension(1000, 600));
        imgLS.setMinimumSize(new java.awt.Dimension(1000, 600));
        imgLS.setPreferredSize(new java.awt.Dimension(1000, 600));
        imgLS.setRequestFocusEnabled(false);
        pnLoaddingscreen.add(imgLS);
        imgLS.setBounds(0, 0, 1200, 700);

        getContentPane().add(pnLoaddingscreen);
        pnLoaddingscreen.setBounds(0, 0, 0, 0);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sets up the layout for the application using CardLayout. Made to switch
     * between screens Makes sure the loading screen appears first
     */
    private void startApplication() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);
        // Add panels with unique identifiers
        getContentPane().add(loginPanel, "LoginScreen");
        getContentPane().add(mnPanel, "MainScreen");
        getContentPane().add(pnLoaddingscreen, "LoadingScreen");
        // Start with the loading screen
        loadScreen("LoadingScreen");
    }

    /**
     * Starts the progress bar animation on the loading screen. Makes the
     * progress bar animation load on the loading screen.
     */
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(30); // Simulated delay for progress bar
                    publish(i); // Publish progress to the UI
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                scLoaddingscreen.setValue(progress);
            }

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute(); // Start the worker thread
    }

    /**
     * Used to change between screens
     *
     * @param changeScreenTo to change the panels
     */
    private void loadScreen(String changeScreenTo) {
        cardLayout.show(getContentPane(), changeScreenTo);
    }

    private void lgusernametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgusernametxtActionPerformed

    }//GEN-LAST:event_lgusernametxtActionPerformed

    private void lgpasswordtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgpasswordtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lgpasswordtxtActionPerformed

    private void lgbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgbuttonActionPerformed
        // TODO add your handling code here:
        String username = lgusernametxt.getText();
        String password = new String(lgpasswordtxt.getPassword());

        // incase username is empty  
        if (username.isEmpty()) {
            lgUsernamError.setText("Please enter your username");
        } // incase password is empty
        else if (password.isEmpty()) {
            lgPasswordError.setText("Please enter your password.");
        } //incase  username and password are incorrect
        else if (!username.equals("p")) {
            lgUsernamError.setText("Username incorrect");
        } //check if password is incorrect
        else if (!password.equals("z")) {
            lgPasswordError.setText("password incorrect.");
        } // proceeds to main screen if the criteria is met
        else {
            lgUsernamError.setText(""); // Clear any previous error messages
            lgPasswordError.setText(""); // Clear any previous error messages

            loadScreen("MainScreen"); // Load the main screen
        }
    }//GEN-LAST:event_lgbuttonActionPerformed

    private boolean validateArtwork(JTextField txtField, JLabel errorLbl, String errorMsg, Color redColor, Color greenColor, boolean isValidFormat) {
        if (ValidationUtil.checkNullOrEmpty(txtField.getText())) {
            txtField.setBorder(createBorder(redColor));  // Changed to use createBorder
            errorLbl.setText("Field cannot be empty!");
            errorLbl.setVisible(true);
            return false;
        } else if (!isValidFormat) {
            txtField.setBorder(createBorder(redColor));  // Changed to use createBorder
            errorLbl.setText(errorMsg);
            errorLbl.setVisible(true);
            return false;
        } else {
            txtField.setBorder(createBorder(greenColor));  // Changed to use createBorder
            errorLbl.setVisible(false);
            return true;
        }
    }

    private javax.swing.border.Border createBorder(Color color) {
        return javax.swing.BorderFactory.createLineBorder(color, 2);
    }

    private void showDialogBox(String message, String title, int messageType) {
        JOptionPane.showMessageDialog(this, message, title, messageType);
    }


    private void mnAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnAddButtonActionPerformed
        // TODO add your handling code here:
        boolean noError = true;

        // Validate Name
        noError &= validateArtwork(
                mnNametxt, nameError, "must be in alphabets.",
                redColor, greenColour, validationUtil.validateName(mnNametxt.getText())
        );
        // Validate ID
        noError &= validateArtwork(
                mnIDtxt, idError, "must be 4 digits.",
                redColor, greenColour, validationUtil.validateID(mnIDtxt.getText())
        );
        // Validate Date
        noError &= validateArtwork(
                mnDatetxt, dateError, "Enter the correct format.",
                redColor, greenColour, validationUtil.validateDate(mnDatetxt.getText())
        );
        // Validate contact
        noError &= validateArtwork(
                mnContacttxt, contactError, "Must start from 98 and be 10 digits.",
                redColor, greenColour, validationUtil.validateContact(mnContacttxt.getText())
        );
        // Validate price
        noError &= validateArtwork(
                mnPricetxt, priceError, "must be in digits.",
                redColor, greenColour, validationUtil.validatePrice(mnPricetxt.getText())
        );
        // Validate address
        noError &= validateArtwork(
                mnStudioAddresstxt, addressError, "must be in alphabets.",
                redColor, greenColour, validationUtil.validateAddress(mnStudioAddresstxt.getText())
        );
        // Validate size
        noError &= validateArtwork(
                mnSizetxt, sizeError, "must be in height X width form.",
                redColor, greenColour, validationUtil.validateSize(mnSizetxt.getText())
        );

        // If no errors, collect data for adding to table
        if (noError) {
            // Prepare data for the table
            // Retrieve values from combo boxes
            // Use these values in your logic
            GalleryModel items = new GalleryModel(
                    Integer.parseInt(mnIDtxt.getText().trim()),
                    mnNametxt.getText().trim(),
                    mnDatetxt.getText().trim(),
                    mnMeduimtxt.getSelectedItem().toString().trim(),
                    mnContacttxt.getText().trim(),
                    Integer.parseInt(mnPricetxt.getText().trim()),
                    mnStudioAddresstxt.getText().trim(),
                    mnFormattxt.getSelectedItem().toString().trim(),
                    mnSizetxt.getText().trim()
            );

            if (duplicateartID(items)) {
                // Add the student if no duplicate is found
                mnIDtxt.setBorder(createBorder(redColor));  // Changed to use createBorder
                showDialogBox("ID already exists", "ID Error", JOptionPane.ERROR_MESSAGE);
            } else {
                artItemList.add(items);
                addArtwork(artItemList);
                mnIDtxt.setBorder(createBorder(greenColour));  // Changed to use createBorder
                mnNametxt.setText("");
                mnIDtxt.setText("");
                mnDatetxt.setText("");
                mnContacttxt.setText("");
                mnPricetxt.setText("");
                mnStudioAddresstxt.setText("");
                mnSizetxt.setText("");
                mnMeduimtxt.setSelectedIndex(0);
                mnFormattxt.setSelectedIndex(0);
                showDialogBox("Art Item added.", "task successful", JOptionPane.INFORMATION_MESSAGE);
            }
        }


    }//GEN-LAST:event_mnAddButtonActionPerformed

    /**
     * Updates the JTable mnTable with artwork details list.
     *
     * @param itemsList the list of GalleryModel objects containing the artwork
     * details
     */
    private void addArtwork(List<GalleryModel> itemsList) {
        DefaultTableModel model = (DefaultTableModel) mntable.getModel();

        // Clear existing rows if needed
        model.setRowCount(0);

        // Populate the table with artwork data
        itemsList.forEach(item -> model.addRow(new Object[]{
            item.getArtId(), //ID of the artwork
            item.getName(), //Name of the artist
            item.getDate(), //Date of the artwork
            item.getMedium(), //medium of the art
            item.getContact(), //Studio contaact
            item.getPrice(),//price of the artwork
            item.getAddress(), //studio address
            item.getFormatt(), //format of the artwork
            item.getSize()//size of the artwork
        }));
    }

    /**
     * Checks if an artwork with the same ID already exists in the list.
     *
     * @param item the GalleryModel object to check for duplication
     * @return true if an artwork with the same ID exists,otherwise false
     */
    private boolean duplicateartID(GalleryModel item) {
        return artItemList.stream()
                .anyMatch(existingArtItem
                        -> existingArtItem.getArtId() == item.getArtId());
    }

    /**
     * Searches for an artwork by ID and updates its details if found.
     *
     * @param updatedItem the GalleryModel object containing updated artwork
     * details
     * @return true if the artwork with the given ID exists and was updated,
     * false otherwise
     */
    private boolean idExists(GalleryModel updatedItem) {
        for (int i = 0; i < artItemList.size(); i++) {
            if (artItemList.get(i).getArtId() == updatedItem.getArtId()) {
                artItemList.set(i, updatedItem); // Update the existing item
                return true;
            }
        }
        return false; // No matching ID found
    }

    private void updateTable(List<GalleryModel> sortedList) {
        DefaultTableModel model = (DefaultTableModel) mntable.getModel();
        model.setRowCount(0); // Clear the table
        for (GalleryModel art : sortedList) {
            model.addRow(new Object[]{art.getArtId(), art.getName(), art.getDate(), art.getMedium(), art.getContact(), art.getPrice(), art.getAddress(), art.getFormatt(),
                art.getSize()});
        }
    }

    /**
     * Handles the "Update " button action event.
     * Validates the input fields, updates the artwork details if the ID exists,
     * and refreshes the table which shows the modified values. Displays 
     * success or error messages.
     *
     * @param evt the ActionEvent triggered by clicking the "update" button
     */
    private void mnUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnUpdateButtonActionPerformed

        // TODO add your handling code here:
        boolean noError = true;

        // Validate Name
        noError &= validateArtwork(
                mnNametxt, nameError, "must be in alphabets.",
                redColor, greenColour, ValidationUtil.validateName(mnNametxt.getText())
        );
        // Validate ID
        noError &= validateArtwork(
                mnIDtxt, idError, "must be 4 digits.",
                redColor, greenColour, ValidationUtil.validateID(mnIDtxt.getText())
        );
        // Validate Date
        noError &= validateArtwork(
                mnDatetxt, dateError, "Enter the correct format.",
                redColor, greenColour, ValidationUtil.validateDate(mnDatetxt.getText())
        );
        // Validate contact
        noError &= validateArtwork(
                mnContacttxt, contactError, "Must start from 98 and be 10 digits.",
                redColor, greenColour, ValidationUtil.validateContact(mnContacttxt.getText())
        );
        // Validate price
        noError &= validateArtwork(
                mnPricetxt, priceError, "must be in digits.",
                redColor, greenColour, ValidationUtil.validatePrice(mnPricetxt.getText())
        );
        // Validate address
        noError &= validateArtwork(
                mnStudioAddresstxt, addressError, "must be in alphabets.",
                redColor, greenColour, ValidationUtil.validateAddress(mnStudioAddresstxt.getText())
        );
        // Validate size
        noError &= validateArtwork(
                mnSizetxt, sizeError, "must be in height X width form.",
                redColor, greenColour, ValidationUtil.validateSize(mnSizetxt.getText())
        );

        // add to table is no errors
        if (noError) {
            GalleryModel updatedItem = new GalleryModel(
                    Integer.parseInt(mnIDtxt.getText().trim()), // Updated ID
                    mnNametxt.getText().trim(), // Updated Name
                    mnDatetxt.getText().trim(), // Updated Date
                    mnMeduimtxt.getSelectedItem().toString().trim(), // Updated Medium
                    mnContacttxt.getText().trim(), // Updated Contact
                    Integer.parseInt(mnPricetxt.getText().trim()), // Updated Price
                    mnStudioAddresstxt.getText().trim(), // Updated Address
                    mnFormattxt.getSelectedItem().toString().trim(), // Updated Format
                    mnSizetxt.getText().trim() // Updated Size
            );

            // If the item was updated, show a success message
            if (idExists(updatedItem)) {
                addArtwork(artItemList);  // Refresh the table
                showDialogBox("Art Item updated successfully.", "Task successful", JOptionPane.INFORMATION_MESSAGE);
                resetFormFields();
            } else {
                // If no item was updated (ID not found), show an error message
                mnIDtxt.setBorder(createBorder(redColor));
                showDialogBox("Art Item not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_mnUpdateButtonActionPerformed


    private void mnDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnDeleteButtonActionPerformed
        // Get the value from the ID text field
        String idText = mnIDtxt.getText().trim();

        if (ValidationUtil.checkNullOrEmpty(idText)) {
            validateArtwork(
                    mnIDtxt, idError, "Enter ID.",
                    redColor, greenColour, ValidationUtil.validateID(idText)
            );
            return;
        }

        try {
            int idToDelete = Integer.parseInt(idText);

            // Use removeIf for safe removal
            boolean isDeleted = artItemList.removeIf(item -> item.getArtId() == idToDelete);

            if (isDeleted) {
                addArtwork(artItemList); // Reload the table with updated data
                JOptionPane.showMessageDialog(this, "Item deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                mnIDtxt.setBorder(createBorder(redColor));
                JOptionPane.showMessageDialog(this, "ID not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {

            showDialogBox("Invalid ID. Please enter a valid number.", "Input Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mnDeleteButtonActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        resetFormFields();
    }//GEN-LAST:event_clearActionPerformed

    private void mnIDtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnIDtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnIDtxtActionPerformed

    private void mnNametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnNametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnNametxtActionPerformed

    private void mnDatetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnDatetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnDatetxtActionPerformed

    private void mnPricetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnPricetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnPricetxtActionPerformed

    private void mnStudioAddresstxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnStudioAddresstxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnStudioAddresstxtActionPerformed

    private void mnContacttxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnContacttxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnContacttxtActionPerformed

    private void mnMeduimtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnMeduimtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnMeduimtxtActionPerformed

    private void mnFormattxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnFormattxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnFormattxtActionPerformed

    private void mnSizetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSizetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnSizetxtActionPerformed

    private void mnSearchtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSearchtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnSearchtxtActionPerformed

    //this is a helper method
    private void registerArtworkFromTable() {
        artItemList.clear(); // Clear the list to avoid duplicates
        DefaultTableModel model = (DefaultTableModel) mntable.getModel();

        // Reconstruct artItemList from the table
        for (int i = 0; i < model.getRowCount(); i++) {
            GalleryModel art = new GalleryModel(
                    (int) model.getValueAt(i, 0), // ID
                    (String) model.getValueAt(i, 1), // Name
                    (String) model.getValueAt(i, 2), // Date
                    (String) model.getValueAt(i, 3), // Medium
                    (String) model.getValueAt(i, 4), // Contact
                    (int) model.getValueAt(i, 5), // Price
                    (String) model.getValueAt(i, 6), // Address
                    (String) model.getValueAt(i, 7), // Format
                    (String) model.getValueAt(i, 8) // Size
            );
            artItemList.add(art);
        }
    }


    private void mnSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSortButtonActionPerformed
        registerArtworkFromTable();
        String order = mnADComboBox.getSelectedItem().toString(); // Get SelectionSort order
        String selectedCriteria = mnSortButton.getSelectedItem().toString(); // Get field to SelectionSort by
        List<GalleryModel> sortedList;

        boolean isDesc = order.equals("highest to lowest");
        System.out.println("Order: " + order + ", Is Descending: " + isDesc + ", Selected Criteria: " + selectedCriteria);

        switch (selectedCriteria) {
            case "Name":
                sortedList = new InsertionSort().sortByname(artItemList, isDesc);
                break;
            case "ID":
                sortedList = new SelectionSort().sortById(artItemList, isDesc);
                break;
            case "Price":
                sortedList = new MergeSort().mergeSortByPrice(artItemList, isDesc);
                break;
            default:
                System.out.println("Invalid Criteria: " + selectedCriteria);
                return;
        }

        addArtwork(sortedList); // Update the UI with the sorted data
    }//GEN-LAST:event_mnSortButtonActionPerformed


    private void mnADComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnADComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnADComboBoxActionPerformed

    private void mnSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSearchButtonActionPerformed
        // TODO add your handling code here:
        List<GalleryModel> sortedList = insertionSort.sortByname(artItemList, false); // Ascending order
        BinarySearch search = new BinarySearch();
        GalleryModel searchedData = search.searchName(mnSearchtxt.getText().trim(), sortedList, 0, sortedList.size() - 1);

        if (searchedData != null) {
            DefaultTableModel model = (DefaultTableModel) mntable.getModel();
            model.setRowCount(0); // Clear the table

            // Add the searched item as the first row
            model.addRow(new Object[]{
                searchedData.getArtId(), searchedData.getName(), searchedData.getDate(), searchedData.getMedium(),
                searchedData.getContact(), searchedData.getPrice(), searchedData.getAddress(), searchedData.getFormatt(),
                searchedData.getSize()

            });

            // Add the rest of the sorted items except the searched one
            for (GalleryModel item : sortedList) {
                if (!item.equals(searchedData)) {
                    model.addRow(new Object[]{
                        item.getArtId(), item.getName(), item.getDate(), item.getMedium(),
                        item.getContact(), item.getPrice(), item.getAddress(), item.getFormatt(),
                        item.getSize()
                    });
                }
            }

            // Highlight the searched item in the table
            mntable.setRowSelectionInterval(0, 0); // Select the first row
            mntable.scrollRectToVisible(mntable.getCellRect(0, 0, true)); // Ensure the row is visible

        } else {
            JOptionPane.showMessageDialog(this, "Invalid name.", "Name does not exist", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mnSearchButtonActionPerformed

    private void mnLogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnLogoutBtnActionPerformed
        // TODO add your handling code here:
        loadScreen("LoginScreen");

    }//GEN-LAST:event_mnLogoutBtnActionPerformed

    private void resetFormFields() {
        // Reset the form fields after successful update
        mnNametxt.setText("");
        mnIDtxt.setText("");
        mnDatetxt.setText("");
        mnContacttxt.setText("");
        mnPricetxt.setText("");
        mnStudioAddresstxt.setText("");
        mnSizetxt.setText("");
        mnMeduimtxt.setSelectedIndex(0);
        mnFormattxt.setSelectedIndex(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GalleryMangement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GalleryMangement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GalleryMangement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GalleryMangement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GalleryMangement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressError;
    private javax.swing.JButton clear;
    private javax.swing.JLabel contactError;
    private javax.swing.JLabel dateError;
    private javax.swing.JLabel idError;
    private javax.swing.JLabel imgLS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lgImg;
    private javax.swing.JLabel lgPasswordError;
    private javax.swing.JLabel lgUsernamError;
    private javax.swing.JButton lgbutton;
    private javax.swing.JPasswordField lgpasswordtxt;
    private javax.swing.JTextField lgusernametxt;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JComboBox<String> mnADComboBox;
    private javax.swing.JPanel mnAboutus;
    private javax.swing.JPanel mnAddArt;
    private javax.swing.JButton mnAddButton;
    private javax.swing.JTextField mnContacttxt;
    private javax.swing.JTextField mnDatetxt;
    private javax.swing.JButton mnDeleteButton;
    private javax.swing.JLabel mnDescrition;
    private javax.swing.JPanel mnFeatured;
    private javax.swing.JComboBox<String> mnFormattxt;
    private javax.swing.JPanel mnGallery;
    private javax.swing.JLabel mnHAbstractArtImg;
    private javax.swing.JLabel mnHAbstractArtLbl;
    private javax.swing.JPanel mnHDescriptionPanel;
    private javax.swing.JLabel mnHModernArtImg;
    private javax.swing.JLabel mnHModernArtLbl;
    private javax.swing.JLabel mnHTitle1;
    private javax.swing.JLabel mnHTitle2;
    private javax.swing.JLabel mnHTraditionalImg;
    private javax.swing.JLabel mnHTraditionalLbl;
    private javax.swing.JLabel mnHmainImg;
    private javax.swing.JPanel mnHome;
    private javax.swing.JPanel mnHomePanelScroll;
    private javax.swing.JTextField mnIDtxt;
    private javax.swing.JLabel mnLineimg1;
    private javax.swing.JLabel mnLineimg2;
    private javax.swing.JLabel mnLineimg3;
    private javax.swing.JButton mnLogoutBtn;
    private javax.swing.JComboBox<String> mnMeduimtxt;
    private javax.swing.JTextField mnNametxt;
    private javax.swing.JPanel mnPanel;
    private javax.swing.JTextField mnPricetxt;
    private javax.swing.JButton mnSearchButton;
    private javax.swing.JTextField mnSearchtxt;
    private javax.swing.JTextField mnSizetxt;
    private javax.swing.JComboBox<String> mnSortButton;
    private javax.swing.JTextField mnStudioAddresstxt;
    private javax.swing.JTabbedPane mnTabPane;
    private javax.swing.JButton mnUpdateButton;
    private javax.swing.JScrollPane mnmainTableScroll;
    private javax.swing.JTable mntable;
    private javax.swing.JLabel nameError;
    private javax.swing.JPanel pnLoaddingscreen;
    private javax.swing.JLabel priceError;
    private javax.swing.JProgressBar scLoaddingscreen;
    private javax.swing.JLabel sizeError;
    // End of variables declaration//GEN-END:variables
}
